#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# loop header
	xorq %rax,%rax		# count = 0;
  iaddq $-8, %rdx
  jge K8_loop_header
  jmp K4_loop_header

K8_loop_header:
  mrmovq (%rdi), %r10	# read val from src...
  mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle K_8_Nops1		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_8_Nops1:
	andq %r11, %r11		# val <= 0?
	jle K_8_Nops2		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_8_Nops2:	
  mrmovq 0x10(%rdi), %r10	# read val from src...
  mrmovq 0x18(%rdi), %r11	# read val from src...
	rmmovq %r10, 0x10(%rsi)	# ...and store it to dst
	rmmovq %r11, 0x18(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle K_8_Nops3		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_8_Nops3:
	andq %r11, %r11		# val <= 0?
	jle K_8_Nops4		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_8_Nops4:
  mrmovq 0x20(%rdi), %r10	# read val from src...
  mrmovq 0x28(%rdi), %r11	# read val from src...
	rmmovq %r10, 0x20(%rsi)	# ...and store it to dst
	rmmovq %r11, 0x28(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle K_8_Nops5		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_8_Nops5:
	andq %r11, %r11		# val <= 0?
	jle K_8_Nops6		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_8_Nops6:
  mrmovq 0x30(%rdi), %r10	# read val from src...
  mrmovq 0x38(%rdi), %r11	# read val from src...
	rmmovq %r10, 0x30(%rsi)	# ...and store it to dst
	rmmovq %r11, 0x38(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle K_8_Nops7		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_8_Nops7:
	andq %r11, %r11		# val <= 0?
	jle K_8_Nops8		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_8_Nops8:
	iaddq $0x40, %rdi	
	iaddq $0x40, %rsi
  iaddq $-8, %rdx
  jge K8_loop_header

K4_loop_header:
  iaddq $8, %rdx
  jg K4_loop_header_1
  jmp Done
K4_loop_header_1:
  iaddq $-2, %rdx
  jge K_4_loop
  jmp K_2_loop_header
K_4_loop:
  mrmovq (%rdi), %r10	# read val from src...
  mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle K_4_Nops1		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_4_Nops1:
	andq %r11, %r11		# val <= 0?
	jle K_4_Nops2		# if so, goto Npos:
	iaddq $1, %rax		# count++
K_4_Nops2:	
	iaddq $0x10, %rdi	
	iaddq $0x10, %rsi
  iaddq $-2, %rdx
  jge K_4_loop

K_2_loop_header:
  iaddq $2, %rdx
  jle Done
K_2_loop:
  mrmovq (%rdi), %r10	# read val from src...
	iaddq $0x8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $0x8, %rsi
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:
	iaddq $-1, %rdx
  jg K_2_loop

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

# Execution begins at address 0 
  .pos 0
  irmovq stack, %rsp    # Set up stack pointer
  irmovq ele1,%rdi
  call rsum_list    # sum_list(ele1)
  halt      # Terminate program 

.align 8
ele1:
  .quad 0x00a
  .quad ele2
ele2:
  .quad 0x0b0
  .quad ele3
ele3:
  .quad 0xc00
  .quad 0

# long rsum_list(list_ptr ls)
# ls in %rdi
rsum_list:
  xorq %rax, %rax  # val = 0
  andq %rdi, %rdi  # set CC
  je done
  mrmovq (%rdi), %rsi  # get ls->val
  pushq %rsi
  mrmovq 0x8(%rdi), %rdi  # ls = ls-next;
  call rsum_list
  popq %rsi
  addq %rsi, %rax  # val += ls->val
done:
  ret

# Stack starts here and grows to lower addresses
  .pos 0x200
stack:

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
  iaddq $-6, %rdx
  jl Remain_loop_header

K_Loop:
  mrmovq (%rdi), %r10	# read val from src...
  mrmovq 8(%rdi), %r11	# read val from src...
	rmmovq %r10, (%rsi)	# ...and store it to dst
	rmmovq %r11, 8(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos1		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos1:
	andq %r11, %r11		# val <= 0?
	jle Npos2		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos2:	
  mrmovq 0x10(%rdi), %r10	# read val from src...
  mrmovq 0x18(%rdi), %r11	# read val from src...
	rmmovq %r10, 0x10(%rsi)	# ...and store it to dst
	rmmovq %r11, 0x18(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos3		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos3:
	andq %r11, %r11		# val <= 0?
	jle Npos4		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos4:
  mrmovq 0x20(%rdi), %r10	# read val from src...
  mrmovq 0x28(%rdi), %r11	# read val from src...
	rmmovq %r10, 0x20(%rsi)	# ...and store it to dst
	rmmovq %r11, 0x28(%rsi)	# ...and store it to dst
	andq %r10, %r10		# val <= 0?
	jle Npos5		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos5:
	andq %r11, %r11		# val <= 0?
	jle Npos6		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos6:
	iaddq $0x30, %rdi	
	iaddq $0x30, %rsi
  iaddq $-6, %rdx
  jge K_Loop

Remain_loop_header:
  iaddq $6, %rdx
  jle Done
Remain_Loop:
  mrmovq (%rdi), %r10	# read val from src...
	iaddq $0x8, %rdi		# src++
	rmmovq %r10, (%rsi)	# ...and store it to dst
	iaddq $0x8, %rsi
	andq %r10, %r10		# val <= 0?
	jle Npos		# if so, goto Npos:
	iaddq $1, %rax		# count++
Npos:
	iaddq $-1, %rdx
  jg Remain_Loop

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */

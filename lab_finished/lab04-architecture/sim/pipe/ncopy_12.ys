#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	#xorq %rax,%rax		# count = 0;
  iaddq $-12, %rdx
  jge K_Loop
  jmp Remainder

K_Loop:
  mrmovq 0x58(%rdi), %r10	
  mrmovq 0x50(%rdi), %r11	
	rmmovq %r10, 0x58(%rsi)	
	andq %r10, %r10
	jle Npos1		
	iaddq $1, %rax

Npos1:
	rmmovq %r11, 0x50(%rsi)
	andq %r11, %r11		
  mrmovq 0x48(%rdi), %r10	
	jle Npos2		
	iaddq $1, %rax

Npos2:	
	rmmovq %r10, 0x48(%rsi)	
	andq %r10, %r10		
  mrmovq 0x40(%rdi), %r10	
	jle Npos3		
	iaddq $1, %rax		

Npos3:	
	rmmovq %r10, 0x40(%rsi)	
	andq %r10, %r10		
  mrmovq 0x38(%rdi), %r10	
	jle Npos4		
	iaddq $1, %rax		

Npos4:	
	rmmovq %r10, 0x38(%rsi)	
	andq %r10, %r10		
  mrmovq 0x30(%rdi), %r10	
	jle Npos5		
	iaddq $1, %rax		

Npos5:	
	rmmovq %r10, 0x30(%rsi)	
	andq %r10, %r10		
  mrmovq 0x28(%rdi), %r10	
	jle Npos6		
	iaddq $1, %rax		

Npos6:	
	rmmovq %r10, 0x28(%rsi)	
	andq %r10, %r10		
  mrmovq 0x20(%rdi), %r10	
	jle Npos7
	iaddq $1, %rax		

Npos7:	
	rmmovq %r10, 0x28(%rsi)	
	andq %r10, %r10		
  mrmovq 0x20(%rdi), %r10	
	jle Npos8	
	iaddq $1, %rax		

Npos8:	
	rmmovq %r10, 0x20(%rsi)	
	andq %r10, %r10		
  mrmovq 0x18(%rdi), %r10	
	jle Npos9	
	iaddq $1, %rax		

Npos9:	
	rmmovq %r10, 0x18(%rsi)	
	andq %r10, %r10		
  mrmovq 0x10(%rdi), %r10	
	jle Npos10	
	iaddq $1, %rax		

Npos10:	
	rmmovq %r10, 0x10(%rsi)	
	andq %r10, %r10		
  mrmovq 0x08(%rdi), %r10	
	jle Npos11
	iaddq $1, %rax		

Npos11:	
	rmmovq %r10, 0x08(%rsi)	
	andq %r10, %r10		
  mrmovq 0x0(%rdi), %r10	
	jle Npos12
	iaddq $1, %rax		

Npos12:	
	rmmovq %r10, 0x0(%rsi)	
	andq %r10, %r10		
	jle End_loop
	iaddq $1, %rax		

End_loop:
	iaddq $0x60, %rdi	
	iaddq $0x60, %rsi
  iaddq $-12, %rdx
  jge K_Loop

Remainder:
  iaddq $4, %rdx
  jl Remainder_0_3
  jg Remainder_5_7
  mrmovq 24(%rdi), %r10	
  jmp Remainder_4

Remainder_0_3:
  iaddq $3, %rdx
  jg Remainder_2_3
  mrmovq (%rdi), %r10	
  je Remainder_1
  ret
  
Remainder_2_3:
  iaddq $-1, %rdx
  mrmovq 8(%rdi), %r10	
  je Remainder_2
  mrmovq 16(%rdi), %r10	
  jmp Remainder_3

Remainder_5_7:
  iaddq $-2, %rdx
  mrmovq 32(%rdi), %r10
  jl Remainder_5
  mrmovq 40(%rdi), %r10	
  je Remainder_6
  mrmovq 48(%rdi), %r11	

Remainder_7:
  mrmovq 40(%rdi), %r10
  rmmovq %r11, 48(%rsi)
  andq %r11, %r11
  jle Remainder_6
  iaddq $1, %rax

Remainder_6:
  rmmovq %r10, 40(%rsi)
  andq %r10, %r10
  mrmovq 32(%rdi), %r10
  jle Remainder_5
  iaddq $1, %rax

Remainder_5:
  rmmovq %r10, 32(%rsi)
  andq %r10, %r10
  mrmovq 24(%rdi), %r10
  jle Remainder_4
  iaddq $1, %rax

Remainder_4:
  rmmovq %r10, 24(%rsi)
  andq %r10, %r10
  mrmovq 16(%rdi), %r10
  jle Remainder_3
  iaddq $1, %rax

Remainder_3:
  rmmovq %r10, 16(%rsi)
  andq %r10, %r10
  mrmovq 8(%rdi), %r10
  jle Remainder_2
  iaddq $1, %rax

Remainder_2:
  rmmovq %r10, 8(%rsi)
  andq %r10, %r10
  mrmovq (%rdi), %r10
  jle Remainder_1
  iaddq $1, %rax

Remainder_1:
  rmmovq %r10, (%rsi)
  andq %r10, %r10
  jle Done
  iaddq $1, %rax


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
